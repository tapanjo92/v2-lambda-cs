AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Cold Start SaaS - Relay + Deployer Lambda Integration

Parameters:
  RelayLambdaS3Bucket:
    Type: String
    Description: S3 bucket for Relay Lambda zip
  RelayLambdaS3Key:
    Type: String
    Description: S3 key for Relay Lambda zip
  DeployerLambdaS3Bucket:
    Type: String
    Description: S3 bucket for Deployer Lambda zip
  DeployerLambdaS3Key:
    Type: String
    Description: S3 key for Deployer Lambda zip
  DestUrl:
    Type: String
    Description: Your SaaS API Gateway endpoint (e.g. https://xxx.execute-api.ap-south-1.amazonaws.com/prod/ingest)

Resources:

  # --- Relay Lambda and Role (forwards logs to your SaaS endpoint) ---
  RelayLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "AllowLogs"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  RelayLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 60
      Role: !GetAtt RelayLambdaRole.Arn
      Environment:
        Variables:
          DEST_URL: !Ref DestUrl
      Code:
        S3Bucket: !Ref RelayLambdaS3Bucket
        S3Key: !Ref RelayLambdaS3Key

  # Permission for CloudWatch Logs to invoke the Relay Lambda
  RelayLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RelayLambda.Arn
      Action: lambda:InvokeFunction
      Principal: logs.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"

  # --- Deployer Lambda and Role (auto-creates subscription filters to relay lambda) ---
  DeployerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowCWLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # Deployer needs to describe and subscribe all log groups
                Action:
                  - logs:DescribeLogGroups
                  - logs:DescribeSubscriptionFilters
                  - logs:PutSubscriptionFilter
                Resource: "*"
              - Effect: Allow # Allow writing to /aws/lambda/* for its own logs
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*:*"

  DeployerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs18.x
      Timeout: 300
      Role: !GetAtt DeployerLambdaRole.Arn
      Environment:
        Variables:
          RELAY_ARN: !GetAtt RelayLambda.Arn
      Code:
        S3Bucket: !Ref DeployerLambdaS3Bucket
        S3Key: !Ref DeployerLambdaS3Key

  # Invoke Deployer Lambda on stack creation to subscribe all current log groups (Custom Resource)
  RunDeployerLambda:
    Type: Custom::RunDeployerLambda
    Properties:
      ServiceToken: !GetAtt DeployerLambda.Arn

  # EventBridge rule: whenever a new log group is created, trigger deployer
  LogGroupCreatedRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.logs
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - logs.amazonaws.com
          eventName:
            - CreateLogGroup
      Targets:
        - Arn: !GetAtt DeployerLambda.Arn
          Id: "DeployerLambdaTarget"

  # Permission for EventBridge to invoke Deployer Lambda
  DeployerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt DeployerLambda.Arn
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt LogGroupCreatedRule.Arn

Outputs:
  RelayLambdaArn:
    Value: !GetAtt RelayLambda.Arn
    Description: ARN of the Lambda that relays logs to your SaaS API.
  DeployerLambdaArn:
    Value: !GetAtt DeployerLambda.Arn
    Description: ARN of the Lambda that manages log group subscriptions.

